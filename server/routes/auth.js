const express = require('express');
const router = express.Router();
const nodemailer = require('nodemailer');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ (–≤ production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis –∏–ª–∏ DB)
const emailCodes = new Map();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
function generateCode() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞ –¥–ª—è email —Å–µ—Ä–≤–µ—Ä–∞
const createTransporter = () => {
  return nodemailer.createTransport({ // ‚Üê createTransport –≤–º–µ—Å—Ç–æ createTransporter
    host: process.env.SMTP_HOST,
    port: parseInt(process.env.SMTP_PORT) || 465,
    secure: true,
    auth: {
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASS,
    },
    tls: {
      rejectUnauthorized: false
    }
  });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email
function isValidEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–¥–æ–≤
function cleanupOldCodes() {
  const now = Date.now();
  const tenMinutesAgo = now - (10 * 60 * 1000);
  
  for (let [email, data] of emailCodes.entries()) {
    if (data.createdAt < tenMinutesAgo) {
      emailCodes.delete(email);
      console.log(`Cleaned up expired code for: ${email}`);
    }
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –∫–æ–¥–æ–º
router.post('/email', async (req, res) => {
  try {
    const { email } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!email) {
      return res.status(400).json({ 
        success: false,
        message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
    }

    if (!isValidEmail(email)) {
      return res.status(400).json({ 
        success: false,
        message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' 
      });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
    const code = generateCode();
    emailCodes.set(email, {
      code,
      createdAt: Date.now(),
      attempts: 0
    });

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–¥–æ–≤
    cleanupOldCodes();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û!
    const transporter = createTransporter();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SMTP —Å–µ—Ä–≤–µ—Ä–æ–º
    try {
      await transporter.verify();
      console.log('‚úÖ SMTP connection verified');
    } catch (verifyError) {
      console.error('‚ùå SMTP connection failed:', verifyError);
      return res.status(500).json({ 
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É' 
      });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email
    const mailOptions = {
      from: process.env.EMAIL_FROM,
      to: email,
      subject: '–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è üîê',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h2>
          <p>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:</p>
          <div style="background: #f8f9fa; padding: 20px; text-align: center; margin: 20px 0;">
            <h1 style="color: #4294ff; font-size: 32px; letter-spacing: 5px; margin: 0;">
              ${code}
            </h1>
          </div>
          <p style="color: #666; font-size: 14px;">
            –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.<br>
            –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
          </p>
        </div>
      `
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ (–≤ production —Ä–µ–∂–∏–º–µ)
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –í–°–ï–ì–î–ê (–∏ –≤ development, –∏ –≤ production)
  try {
    await transporter.sendMail(mailOptions);
    console.log(`‚úÖ Email sent to: ${email}`);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è development
    if (process.env.NODE_ENV !== 'production') {
      console.log('=== DEVELOPMENT INFO ===');
      console.log('üìß Email:', email);
      console.log('üî¢ Code:', code);
      console.log('=======================');
    }
    
  } catch (sendError) {
    console.error('‚ùå Email sending failed:', sendError);
    throw sendError; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
  }

    res.json({ 
      success: true,
      message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É',
      code: process.env.NODE_ENV === 'production' ? null : code
    });

  } catch (error) {
    console.error('‚ùå Email sending error:', error);
    
    if (error.code === 'EAUTH') {
      return res.status(500).json({ 
        success: false,
        message: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.' 
      });
    }
    
    if (error.code === 'ECONNECTION') {
      return res.status(500).json({ 
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç.' 
      });
    }

    res.status(500).json({ 
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
router.post('/verify-code', async (req, res) => {
  try {
    const { email, code } = req.body;

    if (!email || !code) {
      return res.status(400).json({ 
        success: false,
        message: 'Email –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }

    const storedData = emailCodes.get(email);

    if (!storedData) {
      return res.status(400).json({ 
        success: false,
        message: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è (10 –º–∏–Ω—É—Ç)
    if (Date.now() - storedData.createdAt > 10 * 60 * 1000) {
      emailCodes.delete(email);
      return res.status(400).json({ 
        success: false,
        message: '–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π.' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
    if (storedData.attempts >= 3) {
      emailCodes.delete(email);
      return res.status(400).json({ 
        success: false,
        message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
    if (storedData.code !== code) {
      storedData.attempts++;
      emailCodes.set(email, storedData);
      
      return res.status(400).json({ 
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${3 - storedData.attempts}`,
        attemptsLeft: 3 - storedData.attempts
      });
    }

    // –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    emailCodes.delete(email);

    res.json({ 
      success: true,
      message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ! ‚úÖ',
      token: 'your-jwt-token-here'
    });

  } catch (error) {
    console.error('Code verification error:', error);
    res.status(500).json({ 
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞' 
    });
  }
});

module.exports = router;