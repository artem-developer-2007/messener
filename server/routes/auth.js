const express = require('express');
const router = express.Router();
const nodemailer = require('nodemailer');
const jwt = require('jsonwebtoken');
const { v4: uuidv4 } = require('uuid');

// –•–†–ê–ù–ò–õ–ò–©–ï –ö–û–î–û–í(–ü–û–¢–û–ú –ò–°–ü–û–õ–¨–ó–£–Æ –ë–î)
const emailCodes = new Map();
const users = new Map(); // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// –°–ï–ö–†–ï–¢–ù–´–ô –ö–õ–Æ–ß –î–õ–Ø JWT
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

// –ì–ï–ù–ï–†–ê–¶–ò–Ø 6-–ù–ê–ß–ù–û–ì–û –ö–û–î–ê
function generateCode() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

// –ì–ï–ù–ï–†–ê–¶–ò–Ø JWT –¢–û–ö–ï–ù–ê
function generateToken(email, userId) {
  return jwt.sign(
    { 
      email, 
      userId, 
      iat: Math.floor(Date.now() / 1000), // –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
      exp: Math.floor(Date.now() / 1000) + (60 * 60) // 1 —á–∞—Å
    },
    JWT_SECRET
  );
}

// –°–û–ó–î–ê–ù–ò–ï –¢–†–ê–ù–°–ü–û–†–¢–ï–†–ê –î–õ–Ø EMAIL-–°–ï–†–í–ï–†–ê
const createTransporter = () => {
  return nodemailer.createTransport({
    host: process.env.SMTP_HOST, // –•–û–°–¢
    port: parseInt(process.env.SMTP_PORT) || 465, // –ü–û–†–¢
    secure: true, // –ò–°–ü–û–õ–¨–ó–£–ï–¢ SSL/TLS –®–ò–§–†–û–í–ê–ù–ò–ï
    auth: {
      user: process.env.SMTP_USER, // –õ–û–ì–ò–ù
      pass: process.env.SMTP_PASS, // –ü–ê–†–û–õ–¨)–°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô
    },
    tls: {
      rejectUnauthorized: false //..........
    }
  });
};

// –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ù–û–°–¢–¨ EMAIL
function isValidEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; // 
  return emailRegex.test(email); // 
}

// –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –ö–û–î–û–í
function cleanupOldCodes() {
  const now = Date.now(); // –¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø
  const tenMinutesAgo = now - (10 * 60 * 1000); // –ö–û–î –ë–£–î–ï–¢ –°–£–©–ï–°–¢–í–û–í–ê–¢–¨ 10 –ú–ò–ù–£–¢
  
  for (let [email, data] of emailCodes.entries()) {
    if (data.createdAt < tenMinutesAgo) {
      emailCodes.delete(email);
      console.log(`Cleaned up expired code for: ${email}`);
    }
  }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ 
      success: false,
      message: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' 
    });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ 
        success: false,
        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' 
      });
    }
    req.user = user;
    next();
  });
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –∫–æ–¥–æ–º
router.post('/email', async (req, res) => {
  try {
    // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const { email } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!email) {
      return res.status(400).json({ 
        success: false,
        message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
    }

    if (!isValidEmail(email)) {
      return res.status(400).json({ 
        success: false,
        message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' 
      });
    }

    // –°–û–ó–î–ê–ï–ú –ò–õ–ò –ü–û–õ–£–ß–ê–ï–ú USERID –î–õ–Ø EMAIL
    let userId = users.get(email);
    if (!userId) {
      userId = uuidv4();
      users.set(email, userId);
      console.log(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${email} -> ${userId}`);
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${email} -> ${userId}`);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
    const code = generateCode();
    emailCodes.set(email, {
      code,
      createdAt: Date.now(),
      attempts: 0,
      userId: userId // –°–æ—Ö—Ä–∞–Ω—è–µ–º userId –¥–ª—è –∫–æ–¥–∞
    });

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–¥–æ–≤
    cleanupOldCodes();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û!
    const transporter = createTransporter();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SMTP —Å–µ—Ä–≤–µ—Ä–æ–º
    try {
      await transporter.verify();
      console.log('SMTP connection verified');
    } catch (verifyError) {
      console.error('‚ùå SMTP connection failed:', verifyError);
      return res.status(500).json({ 
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É' 
      });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email
    const mailOptions = {
      from: process.env.EMAIL_FROM,
      to: email,
      subject: '–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è üîê',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h2>
          <p>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:</p>
          <div style="background: #f8f9fa; padding: 20px; text-align: center; margin: 20px 0;">
            <h1 style="color: #4294ff; font-size: 32px; letter-spacing: 5px; margin: 0;">
              ${code}
            </h1>
          </div>
          <p style="color: #666; font-size: 14px;">
            –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.<br>
            –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
          </p>
        </div>
      `
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –í–°–ï–ì–î–ê (–∏ –≤ development, –∏ –≤ production)
  try {
    await transporter.sendMail(mailOptions);
    console.log(`‚úÖ Email sent to: ${email}`);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è development
    if (process.env.NODE_ENV !== 'production') {
      console.log('=== DEVELOPMENT INFO ===');
      console.log('üìß Email:', email);
      console.log('üî¢ Code:', code);
      console.log('üë§ User ID:', userId);
      console.log('=======================');
    }
    
  } catch (sendError) {
    console.error('‚ùå Email sending failed:', sendError);
    throw sendError; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
  }

    res.json({ 
      success: true,
      message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É',
      code: process.env.NODE_ENV === 'production' ? null : code,
      userId: userId // –í–æ–∑–≤—Ä–∞—â–∞–µ–º userId –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    });

  } catch (error) {
    console.error('‚ùå Email sending error:', error);
    
    if (error.code === 'EAUTH') {
      return res.status(500).json({ 
        success: false,
        message: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.' 
      });
    }
    
    if (error.code === 'ECONNECTION') {
      return res.status(500).json({ 
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç.' 
      });
    }

    res.status(500).json({ 
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
router.post('/verify-code', async (req, res) => {
  try {
    const { email, code } = req.body;

    if (!email || !code) {
      return res.status(400).json({ 
        success: false,
        message: 'Email –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }

    const storedData = emailCodes.get(email);

    if (!storedData) {
      return res.status(400).json({ 
        success: false,
        message: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è (10 –º–∏–Ω—É—Ç)
    if (Date.now() - storedData.createdAt > 10 * 60 * 1000) {
      emailCodes.delete(email);
      return res.status(400).json({ 
        success: false,
        message: '–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π.' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
    if (storedData.attempts >= 3) {
      emailCodes.delete(email);
      return res.status(400).json({ 
        success: false,
        message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
    if (storedData.code !== code) {
      storedData.attempts++;
      emailCodes.set(email, storedData);
      
      return res.status(400).json({ 
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${3 - storedData.attempts}`,
        attemptsLeft: 3 - storedData.attempts
      });
    }

    // –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π userId –∏–∑ –∫–æ–¥–∞
    const userId = storedData.userId;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω (–æ–Ω –±—É–¥–µ—Ç —Ä–∞–∑–Ω—ã–º, –Ω–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ userId)
    const token = generateToken(email, userId);

    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    emailCodes.delete(email);

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${email} -> ${userId}`);
    console.log(`üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è userId: ${userId}`);

    res.json({ 
      success: true,
      message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ! ‚úÖ',
      token: token,
      userId: userId,
      email: email
    });

  } catch (error) {
    console.error('Code verification error:', error);
    res.status(500).json({ 
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞' 
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
router.get('/verify-token', authenticateToken, (req, res) => {
  res.json({ 
    success: true,
    user: req.user 
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get('/user/:userId', authenticateToken, (req, res) => {
  const { userId } = req.params;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
  if (req.user.userId !== userId) {
    return res.status(403).json({ 
      success: false,
      message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' 
    });
  }

  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
  const userEntry = Array.from(users.entries()).find(([email, id]) => id === userId);
  
  if (!userEntry) {
    return res.status(404).json({ 
      success: false,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
    });
  }

  res.json({ 
    success: true,
    user: {
      userId: userId,
      email: userEntry[0] // email –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    }
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ userId –ø–æ email (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
router.get('/user-by-email/:email', (req, res) => {
  const { email } = req.params;
  const userId = users.get(email);
  
  if (!userId) {
    return res.status(404).json({ 
      success: false,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
    });
  }

  res.json({ 
    success: true,
    email: email,
    userId: userId
  });
});

module.exports = router;